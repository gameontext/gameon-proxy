global

  stats socket /run/haproxy/admin.sock mode 660 level admin
  stats timeout 30s
  debug

  # https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
  # https://timtaubert.de/blog/2014/11/the-sad-state-of-server-side-tls-session-resumption-implementations/
  # To scan/check site, https://securityheaders.io/
  tune.ssl.default-dh-param 2048

  ssl-default-bind-options no-sslv3 no-tls-tickets
  ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!DES-CBC3-SHA

  ssl-default-server-options no-sslv3 no-tls-tickets
  ssl-default-server-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!DES-CBC3-SHA

  # Distribute the health checks with a bit of randomness
  spread-checks 5

userlist admins
  user admin insecure-password admin

resolvers docker
  nameserver dns "${DNS_TCP_ADDR}:${DNS_TCP_PORT}"
  resolve_retries       3
  timeout retry         1s
  hold other           10s
  hold refused         10s
  hold nx              10s
  hold timeout         10s
  hold valid           10s

defaults
  log   global
  mode  http
  retries 3
  option redispatch
  option dontlog-normal
  option dontlognull

  option log-health-checks

  option http-server-close
  timeout connect 5s
  timeout client 30s
  timeout client-fin 30s
  timeout server 30s
  timeout tunnel  1h

  default-server resolvers docker resolve-prefer ipv4
  default-server init-addr none

  errorfile 400 /usr/local/etc/haproxy/errors/400.http
  errorfile 403 /usr/local/etc/haproxy/errors/403.http
  errorfile 408 /usr/local/etc/haproxy/errors/408.http
  errorfile 500 /usr/local/etc/haproxy/errors/500.http
  errorfile 502 /usr/local/etc/haproxy/errors/502.http
  errorfile 503 /usr/local/etc/haproxy/errors/503.http
  errorfile 504 /usr/local/etc/haproxy/errors/504.http

listen stats
    bind *:1936 ssl crt /etc/ssl/proxy.pem
    stats enable
    stats uri /
    stats hide-version
    stats auth admin:admin


frontend frontend-ssl
  bind *:80
  bind *:443 ssl crt /keystore/proxy.pem
  mode http
  option httplog
  redirect scheme https code 301 if !{ ssl_fc }

  option forwardfor
  reqadd X-Forwarded-Proto:\ https
  reqadd X-Forwarded-Port:\ 443

  rspadd  Strict-Transport-Security:\ max-age=15768000

  acl auth path_beg -i /auth
  acl not_ready nbsrv(auth) lt 1
  use_backend auth  if auth

  acl map path_beg -i /map
  acl not_ready nbsrv(map) lt 1
  use_backend map if map

  acl mediator path_beg -i /mediator
  acl not_ready nbsrv(mediator) lt 1
  use_backend mediator  if mediator

  acl player path_beg -i /play
  acl not_ready nbsrv(player) lt 1
  use_backend player  if player

  acl room  path_beg -i /rooms
  acl not_ready nbsrv(room) lt 1
  use_backend room    if room

  acl roomjs  path_beg -i /roomjs
  use_backend roomjs  if roomjs

  acl slackin path_beg -i /slackin
  use_backend slackin   if slackin

  acl swagger path_beg -i /swagger
  use_backend swagger if swagger

  default_backend static-content

  monitor-uri   /site_alive
  monitor fail  if not_ready

backend auth
  mode http
  option httplog
  option httpchk GET /auth/health HTTP/1.1\r\nHost:localhost
  balance roundrobin
  server auth1 auth:9080 check inter 1m

backend map
  mode http
  option httplog
  option httpchk GET /map/v1/health HTTP/1.1\r\nHost:localhost
  balance roundrobin
  server map1 map:9080 check inter 1m

backend mediator
  mode http
  option httplog
  option httpchk GET /mediator HTTP/1.1\r\nHost:localhost
  balance roundrobin
  server mediator1 mediator:9080 check inter 1m

backend player
  mode http
  option httplog
  option httpchk GET /players/v1/health HTTP/1.1\r\nHost:localhost
  balance roundrobin
  server player1 player:9080 check inter 1m

backend room
  mode http
  option httplog
  option httpchk HEAD / HTTP/1.1\r\nHost:localhost
  balance roundrobin
  server room1 room:9080 check inter 1m

backend roomjs
  mode http
  option httplog
  balance roundrobin
  server roomjs1 roomjs:5000 check

backend slackin
  mode http
  option httplog
  option httpchk HEAD / HTTP/1.1\r\nHost:localhost
  balance roundrobin
  http-request set-path %[path,regsub(/slackin,,g)]
  server slackin1 slackin:3000 check inter 1m

backend swagger
  mode http
  option httplog
  option httpchk HEAD /health HTTP/1.1\r\nHost:localhost
  balance roundrobin
  server swagger1 swagger:8080 check inter 1m

backend static-content
  mode http
  option httpchk HEAD /health HTTP/1.1\r\nHost:localhost
  option httplog
  balance roundrobin
  server webapp1 webapp:8080 check inter 1m
